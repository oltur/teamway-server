basePath: /api/v1
definitions:
  httputil.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  model.AddTestRequest:
    properties:
      negativeResult:
        type: string
      positiveResult:
        type: string
      questions:
        items:
          $ref: '#/definitions/model.Question'
        type: array
      scoreThreshold:
        type: integer
      title:
        type: string
    type: object
  model.AddUserRequest:
    properties:
      password:
        type: string
      userName:
        example: user_name
        type: string
    type: object
  model.Answer:
    properties:
      score:
        type: integer
      title:
        type: string
    type: object
  model.GetNextQuestionResponse:
    properties:
      question:
        type: string
      questionNumber:
        type: integer
      testFinished:
        type: boolean
      totalQuestions:
        type: integer
    type: object
  model.LoginRequest:
    properties:
      password:
        type: string
      userName:
        type: string
    type: object
  model.Question:
    properties:
      answers:
        items:
          $ref: '#/definitions/model.Answer'
        type: array
      title:
        type: string
    type: object
  model.Test:
    properties:
      id:
        type: string
      negativeResult:
        type: string
      positiveResult:
        type: string
      questions:
        items:
          $ref: '#/definitions/model.Question'
        type: array
      scoreThreshold:
        type: integer
      title:
        type: string
    type: object
  model.TestTaken:
    properties:
      answers:
        additionalProperties:
          type: string
        description: key is question title, value is answer title
        type: object
      score:
        type: integer
      testTakenId:
        $ref: '#/definitions/model.TestTakenId'
    type: object
  model.TestTakenId:
    properties:
      testId:
        type: string
      userId:
        type: string
    type: object
  model.UpdateUserRequest:
    properties:
      id:
        example: xxx
        type: string
      password:
        type: string
    type: object
  model.User:
    properties:
      id:
        type: string
      passwordHash:
        type: string
      testsTaken:
        items:
          $ref: '#/definitions/model.TestTaken'
        type: array
      token:
        type: string
      tokenExpires:
        type: integer
      userName:
        example: user_name
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: olturua@gmail.com
    name: API Support
    url: NA
  description: 'This is a Teamway test task: Server, based on celler example.'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: 'Teamway test task: Server'
  version: "0"
paths:
  /test:
    get:
      consumes:
      - application/json
      description: get tests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Test'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: List tests
      tags:
      - Test
    post:
      consumes:
      - application/json
      description: Add new test
      parameters:
      - description: Add test request
        in: body
        name: test
        required: true
        schema:
          $ref: '#/definitions/model.AddTestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Test'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Add test
      tags:
      - Test
  /test-by-title/{title}:
    get:
      consumes:
      - application/json
      description: get test by title
      parameters:
      - description: Test title
        in: path
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Test'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: ShowTestByTitle
      tags:
      - Test By Title
  /test-taken:
    get:
      consumes:
      - application/json
      description: Calculate and return the test result
      parameters:
      - description: Test Id
        in: query
        name: test-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "202":
          description: Accepted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Gets the test result
      tags:
      - Take Test
    post:
      consumes:
      - application/json
      description: Saves an answer for a given question in a given test
      parameters:
      - description: Test Id
        in: query
        name: test-id
        required: true
        type: string
      - description: Question title
        in: query
        name: question-title
        required: true
        type: string
      - description: Answer title
        in: query
        name: answer-title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TestTaken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Answer a question
      tags:
      - Take Test
  /test-taken/next:
    get:
      consumes:
      - application/json
      description: Gets next unanswered question and related information
      parameters:
      - description: Test Id
        in: query
        name: test-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetNextQuestionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Gets next question
      tags:
      - Take Test
  /test/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by test ID
      parameters:
      - description: Test ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a test
      tags:
      - Test
    get:
      consumes:
      - application/json
      description: get test by ID
      parameters:
      - description: Test ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Test'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Show a test
      tags:
      - Test
  /user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: Add user request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.AddUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Register
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Show a user
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Update by json user
      parameters:
      - description: Update user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UpdateUserRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: Logs user in
      parameters:
      - description: Login Request
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Login
      tags:
      - User
  /user/logout:
    post:
      consumes:
      - application/json
      description: Logs user out
      produces:
      - application/json
      responses:
        "204":
          description: Ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - User
  /utils/ping:
    put:
      consumes:
      - application/json
      description: pings
      produces:
      - application/json
      responses:
        "200":
          description: Pong
          schema:
            type: string
      summary: Ping
      tags:
      - Tools
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
